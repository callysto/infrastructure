# {{ ansible_managed }}
{% block global %}
import os
import sys
import syzygyauthenticator

from subprocess import check_call, check_output
from tornado import web

def create_fs_hook(spawner):
      username = spawner.user.name
      callysto_user = 'jupyter'
      env = os.environ
      env['GETTING_STARTED'] = '{{ jupyterhub_getting_started_url }}'
      check_call([os.path.join(syzygyauthenticator.__path__[0], 'scripts/zfs-homedir.sh'), username, callysto_user], env=env)
      refquota,available,readonly = check_output(
                                         ['/usr/sbin/zfs',
                                          'get',
                                          '-H',
                                          '-p',
                                          '-o', 'value',
                                          'refquota,available,readonly',
                                          f'tank/home/{username}']
                                         ).split()
      refquota, available = map(int, [refquota, available])

      # If there are fewer than free_bytes_required available, don't try to spawn
      free_bytes_required = 512 * 1024

      if (int(available) < free_bytes_required):
             msg = f'{ (available / (1024 * 1024)):.1f} MB free; {(refquota - available) / (1024 * 1024):.1f} / {refquota / (1024 * 1024):.1f} MB used'
             e = web.HTTPError(507, log_message=f"{username}: Insufficient free space, refusing spawn.")
             e.jupyterhub_message = f'Storage quota exceeded for {username}.\n{msg}'
             raise e
      elif (readonly.decode() == "on"):
             e = web.HTTPError(507, log_message=f"{username}: Readonly account, refusing spawn.")
             e.jupyterhub_message = f'{username}: Term of service violation, account locked.'
             raise e


c.Spawner.pre_spawn_hook = create_fs_hook

{% for global_option in jupyterhub_global_options %}
c.{{ global_option.conf_object }} = {{ global_option.value }}
{% endfor %}

{% if jupyterhub_load_roles is defined %}
c.JupyterHub.load_roles = []
{% for role in jupyterhub_load_roles %}
c.JupyterHub.load_roles.append( {
  'name': '{{ role.name }}',
  'scopes': [{% for item in role.scopes %}{{ item }}{% if not loop.last -%}, {% endif -%}{% endfor %}],
  'services': [{% for item in role.services %}{{ item }}{% if not loop.last -%}, {% endif -%}{% endfor %}],
})
{% endfor %}
{% endif %}

{% if jupyterhub_services is defined %}
c.JupyterHub.services = []
{% for service in jupyterhub_services %}
c.JupyterHub.services.append( {
    'name': '{{ service.name }}',
    'admin': {{ service.admin | default(False) }},
    'command': [{% for item in service.command %}{{ item }}{% if not loop.last -%}, {% endif -%}{% endfor %}]
})
{% endfor %}
{% endif %}

{% if jupyterhub_admin_users | length > 0 -%}
c.Authenticator.admin_users  = set([{% for user in jupyterhub_admin_users -%}'{{ user }}'{% if not loop.last -%},{% endif -%}{% endfor -%}])
{% endif %}

c.Authenticator.allow_all = {{ jupyterhub_allow_all }}

{% if jupyterhub_global_options_extra is defined %}
{% for global_option in jupyterhub_global_options_extra %}
c.{{ global_option.conf_object }} = {{ global_option.value }}
{% endfor %}
{% endif %}
{% endblock %}

{% block proxy -%}
{% if jupyterhub_auth_token != "" -%}
c.ConfigurableHTTPProxy.auth_token = '{{ jupyterhub_auth_token }}'
{% endif -%}
{% endblock %}
{% block cookie %}
{% if jupyterhub_cookie_secret_file != "" -%}
c.JupyterHub.cookie_secret_file = '{{ jupyterhub_cookie_secret_file }}'
{% endif -%}
{% endblock -%}

# These stats should be protected/authenticated via caddy
{% block stats %}
{% if jupyterhub_stats_service %}
c.JupyterHub.authenticate_prometheus = False
{% endif %}
{% endblock %}

{% block spawner %}
{% if jupyterhub_spawner in jupyterhub_spawners %}
c.JupyterHub.spawner_class = '{{ jupyterhub_spawners[jupyterhub_spawner].name }}'
{% if 'options' in jupyterhub_spawners[jupyterhub_spawner] %}
{% for spawner_option in jupyterhub_spawners[jupyterhub_spawner].options %}
c.{{ spawner_option.conf_object }} = {{ spawner_option.value }}
{% endfor %}
{% endif %}
{% endif %}
{% endblock %}

{% block authenticator %}
{% if jupyterhub_authenticator in jupyterhub_authenticators %}
c.JupyterHub.authenticator_class = '{{ jupyterhub_authenticators[jupyterhub_authenticator].name }}'
{% if 'options' in jupyterhub_authenticators[jupyterhub_authenticator] %}
{% for authenticator_option in jupyterhub_authenticators[jupyterhub_authenticator].options %}
c.{{ authenticator_option.conf_object }}  = {{ authenticator_option.value }}
{% endfor %}
{% endif %}
{% endif %}
{% endblock %}

{% if jupyterhub_shib_return_url != "" -%}
c.RemoteUserAuthenticator.shibReturnURL = '{{ jupyterhub_shib_return_url }}'
{% endif %}

c.JupyterHub.template_paths = ["{{ jupyterhub_hub_template_dir }}"]
c.JupyterHub.logo_file = '{{ jupyterhub_hub_template_dir }}/logo.png'

{% if jupyterhub_alert != "" %}
c.JupyterHub.template_vars = {'announcement': '<div class="alert alert-danger">{{ jupyterhub_alert }}<button type="button" class="close" data-dismiss="alert" aria-label="Close"><span aria-hidden="true">&times;</span></button></div>'}
{% endif %}

{% if jupyterhub_announcement != "" %}
c.JupyterHub.template_vars = {'announcement': '<div class="alert alert-info">{{ jupyterhub_announcement }}<button type="button" class="close" data-dismiss="alert" aria-label="Close"><span aria-hidden="true">&times;</span></button></div>'}
{% endif %}

