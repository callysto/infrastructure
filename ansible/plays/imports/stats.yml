---
# Manages stats configuration
# This shouldn't be run on its own.
- name: Validate stats configuration
  hosts: stats
  become: true
  tasks:
    - name: Ensure zfs_disk_1 and zfs_disk_2 are set
      assert:
        that: >-
          zfs_disk_1 is defined and zfs_disk_1 != "" and zfs_disk_2 is defined and zfs_disk_2 != ""
        msg: "Must set zfs_disk_1 and zfs_disk_2. This is usually done automatically with Terraform"

    - name: Ensure callysto_ssl_cert_dir is set
      assert:
        that: >-
          callysto_ssl_cert_dir != ""
        msg: "Must set callysto_ssl_cert_dir"

    - name: Ensure zfs_pool_name is set
      assert:
        that: >-
          zfs_pool_name is defined and zfs_pool_name != ""
        msg: "Must set either zfs_pool_name"

- name: Generic Callysto host configuration
  hosts: stats
  become: true
  tasks:
    # Add relevant keys to `ssh_public_keys`
    # in either host_vars, group_vars, or local_vars.
    - name: Manage SSH public keys
      tags: ["ssh"]
      ansible.posix.authorized_key:
        user: '{{ item.value.user }}'
        state: '{{ item.value.state }}'
        key: '{{ item.value.public_key }}'
      with_dict: '{{ ssh_public_keys }}'
      when: ssh_public_keys is defined

    - name: Install Base Packages
      become: true
      tags: ["base-packages"]
      ansible.builtin.yum:
        name: '{{ item }}'
        state: present
      with_items: '{{ base_packages }}'
      when: base_packages is defined

    - name: Configure SELinux
      tags: ["selinux"]
      ansible.posix.selinux:
        policy: targeted
        state: permissive

    - name: Ensure firewalld service is running
      become: true
      tags:
        - firewalld
      ansible.builtin.yum:
        name: firewalld
        state: present

    - name: Poke firewall holes
      become: true
      tags:
        - firewalld
      ansible.posix.firewalld:
        service: '{{ item.value.service }}'
        permanent: "{{ item.value.permanent | default('yes') }}"
        state: '{{ item.value.state }}'
        zone: '{{ item.value.zone }}'
      with_dict: '{{ firewalld_service_rules }}'
      when: firewalld_service_rules is defined

    - name: Install Python Environment
      become: true
      tags:
        - python
      ansible.builtin.yum:
        name: "{{ item }}"
        state: present
      with_items:
        - python3.11
        - python3.11-pip
        - python3.11-devel

    - name: Set Python3.11 as the default
      become: true
      tags:
        - python
      community.general.alternatives:
        name: python3
        path: /usr/bin/python3.11
        link: /usr/bin/python3


    - name: Set pip3.11 as the default
      become: true
      tags:
        - python
      community.general.alternatives:
        name: pip3
        path: /usr/bin/pip3.11
        link: /usr/bin/pip3

    - name: Update Needs-Restarting python
      become: true
      tags:
        - python
      lineinfile:
        dest: /usr/bin/needs-restarting
        regexp: '^#!/usr/bin/python3$'
        line: '#!/usr/bin/python3.9'

- name: Apply play specific roles
  hosts: stats
  roles:
    - { role: geerlingguy.repo-epel, become: yes}
    - { role: weareinteractive.sudo, become: yes }
    - { role: devsec.hardening.ssh_hardening, become: yes }

    - role: sysstat
      become: yes

    - role: geerlingguy.apache
      become: yes

    # This will create and manage a zpool based on
    # `zfs_disk_1` and `zfs_disk_2` defined in local_vars.yml.
    - name: Manage ZFS
      tags: ["zfs"]
      role: zfs

    - name: Copy SSL certificates
      tags: ["ssl"]
      role: callysto-ssl

    - name: Manage Caddy
      tags: ["stats", "caddy"]
      role: caddy
      vars:
        caddy_user: "root"
        caddy_home: "/root"
        caddy_config: |
          :{{ 80 }} {
            redir https://{{ ansible_nodename }}/grafana/login
          }
          :{{ 443 }} {
            tls /etc/pki/tls/certs/fullchain.pem /etc/pki/tls/private/privkey.pem
            proxy /prometheus 127.0.0.1:9090
            basicauth /prometheus {{ stats_username }} {{ stats_password }}
            proxy /grafana 127.0.0.1:3000 {
              header_upstream Host {host}
              without /grafana
            }
            {% for name, port in caddy_port_mappings.items() %}
            basicauth /{{ name }} {{ stats_username }} {{ stats_password }}
            proxy /{{ name }} 127.0.0.1:{{ port }} {
              header_upstream Host {host}
              without /{{ name }}
            }
            {% endfor %}
          }

    - name: Manage prometheus
      tags: ["stats", "prometheus"]
      role: prometheus.prometheus.prometheus
      vars:
        prometheus_web_external_url: 'https://{{ ansible_nodename }}/prometheus/'
        prometheus_db_dir: "/{{ zfs_pool_name }}/prometheus"
        prometheus_targets:
          nodes:
            - targets:
                "{{ groups['all'] | map('extract', hostvars, ['inventory_hostname']) | map('regex_replace', '$', ':{{ caddy_port }}') | list }}"
              labels:
                env: "hub"
          hubs:
            - targets:
                "{{ groups['hub'] | map('extract', hostvars, ['inventory_hostname']) | map('regex_replace', '$', ':{{ caddy_port }}') | list }}"
              labels:
                env: "hub"
        prometheus_scrape_configs:
          - job_name: "nodes"
            scheme: "https"
            metrics_path: "/node/metrics"
            basic_auth:
              username: "{{ stats_username }}"
              password: "{{ stats_password }}"
            file_sd_configs:
              - files:
                - "/etc/prometheus/file_sd/nodes.yml"
          - job_name: "jupyter"
            scheme: "https"
            metrics_path: "/jupyterhub/jupyter/hub/metrics"
            basic_auth:
              username: "{{ stats_username }}"
              password: "{{ stats_password }}"
            file_sd_configs:
              - files:
                - "/etc/prometheus/file_sd/hubs.yml"

    - name: Prometheus node exporter
      tags: ["stats", "prometheus"]
      role: prometheus.prometheus.node_exporter
      vars:
        prometheus_node_exporter_config_flags:
           'web.listen-address': '127.0.0.1:9100'
           'log.level': 'info'

    - name: Manage grafana
      tags: ["stats", "grafana"]
      role: grafana.grafana.grafana
      vars:
        grafana_address: 127.0.0.1
        grafana_url: "https://{{ ansible_nodename}}/grafana"
        grafana_data_dir: "/{{ zfs_pool_name }}/grafana"
        grafana_security:
          admin_user: admin
          admin_password: "{{ grafana_admin_password }}"
        grafana_datasources:
          - name: prometheus
            type: prometheus
            access: proxy
            url: http://127.0.0.1:9090/prometheus/
            basicAuth: True
            basicAuthUser: "{{ stats_username }}"
            basicAuthPassword: "{{ stats_password }}"
